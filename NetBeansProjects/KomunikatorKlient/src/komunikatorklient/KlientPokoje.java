/*
    Class KlientPokoje (eng. Clients') Rooms contains GUI, and algorithms to connect to the host.
    
*/

package komunikatorklient;


import java.awt.Dimension;
import java.awt.GridLayout;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.BorderFactory;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author "Kajetan Brzuszczak 209869"
 */

/*
    
*/
public class KlientPokoje extends javax.swing.JFrame implements Runnable
{
    private String NazwaUzytkownika = " "; //Name of the user
    private Socket gniazdoKlienta;      
    private ObjectInputStream strumienOdbioru;
    private ObjectOutputStream strumienWyjscia;
    
    
    /*
        One user can be connected to many rooms, therefore we keep those rooms
        in HashSet.
    */
    
    private HashSet<PokojRozmowy> pokoje = new HashSet<>(); 
    
    /*
        polacz (eng. connect) connect to the host with given ip, and port
        
        @if (host has been found)
            return true
        @else
            return false
    */
    private boolean polacz(String ip, Integer port)
    {
        gniazdoKlienta = new Socket(); //initializing socket without connection
        try {
            gniazdoKlienta.connect(new InetSocketAddress(ip,port));
        } catch (IOException ex) {
            //Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        
        try {
            strumienWyjscia = new ObjectOutputStream(gniazdoKlienta.getOutputStream());
                
        } catch (IOException ex) {
            
            
            return false;
        }
        
        
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton4.setText("Rozłącz");
        
        try {
            strumienWyjscia.writeObject("/user "
                    + NazwaUzytkownika
                    + " "
                    + gniazdoKlienta.getInetAddress().toString()
                    + " "
                    + gniazdoKlienta.getPort()
                    + " " );
        } catch (IOException ex) {
            //Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }        
        return true;
    }
    
    /*
        Sending message to the host
    */
    public void napisz(String wiadomosc)
    {
        try {
            strumienWyjscia.writeObject(wiadomosc);
        } catch (IOException ex) {
            //Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Nie można było wysłać rządania");
        }
    }
    
    /*
        Disconnect host.
    */
    private void rozlacz()
    {
        try {
            napisz("/exit");
            strumienOdbioru.close();
            strumienWyjscia.close();         
            gniazdoKlienta.close();
        } catch (IOException ex) {
            //Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        widoczek.refresh(null);
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        
        jButton4.setText("Połącz");
    }
    
    public void refresh()
    {
        jLabel1.setText(NazwaUzytkownika);
        
        repaint();
    }
    
    
    /**
     * Creates new form KlientPokoje
     */
    public KlientPokoje() {
        super("Komunikator Internetowy Kajetan Brzuszczak");
        initComponents();
        
        widoczek = new WidokMapy(200, 200, "Dostępne pokoje:");
            ///Availibe rooms
        jPanel1.add(widoczek);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Dołącz");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stwórz Pokój");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Wyjdź");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("Uzytkownik");

        jButton4.setText("Połącz");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (jButton4.getText().equals("Połącz"))
            {
            JPanel dialog = new JPanel(new GridLayout(0,1));
            JPanel loginP = new JPanel();
            JPanel ipP = new JPanel();
            JPanel portP = new JPanel();

            JLabel login = new JLabel("Login   ",10);
            JLabel ip    = new JLabel("IP      ",10);
            JLabel port  = new JLabel("PORT    ",10);

            JTextField loginF   = new JTextField(10);
            JTextField ipF      = new JTextField(10);
            JTextField portF    = new JTextField(10);

            loginP.add(login);
            loginP.add(loginF);

            ipP.add(ip);
            ipP.add(ipF);

            portP.add(port);
            portP.add(portF);

            dialog.add(loginP);
            dialog.add(ipP);
            dialog.add(portP);

            int n = JOptionPane.showConfirmDialog(null, dialog, "Wprowadź dane", OK_CANCEL_OPTION);

            if (n == JOptionPane.OK_OPTION)
            {
                String loginS = loginF.getText();
                String ipS = ipF.getText();
                String portS = portF.getText();
                int portI = 0;
                try
                {
                    portI = Integer.parseInt(portS);            
                }
                catch(NumberFormatException ex)
                {
                    JOptionPane.showMessageDialog(null, "Port musi być liczbą!");
                    return;
                }
                if (loginS.length() < 4)
                {
                    JOptionPane.showMessageDialog(null, "Nazwa musi mieć minimum 4 znaki");
                    return;
                }
                NazwaUzytkownika = loginS;
                if (polacz(ipS, portI))
                {
                    JOptionPane.showMessageDialog(null, "Połączono!");
                    Thread watek = new Thread(this);
                    watek.start();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Nie potrafiono się połączyć");
                }
                
            }
        }
        else
        {
            rozlacz();
        }
        refresh();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        zamknij();
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            // TODO add your handling code here:
        napisz("/newroom");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String numerPokoju = widoczek.getSelection();
        if(numerPokoju.equals(-1))
        {
            JOptionPane.showMessageDialog(null, "Nie wybrano, żadnego pokoju");
            return;
        }
        napisz("/connect " + numerPokoju);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlientPokoje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlientPokoje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlientPokoje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlientPokoje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlientPokoje().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    private WidokMapy widoczek; 
    
    
    private void zamknij() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    /*
        Responding on message from server
    */
    private void obslugaWiadomosc(String komenda)
    {
        System.out.println("\nSerwer: " + komenda);
        String []wiadomosc = komenda.toLowerCase().split(" ");
        String komend = wiadomosc[0];
        String []parametry = Arrays.copyOfRange(wiadomosc, 1, wiadomosc.length);
        switch(komend)
        {
            case "/room": 
            {
                room(parametry);
                break;
            }
            case "/createroom":
            {
                createRoom(parametry);
                JOptionPane.showMessageDialog(null, "Dołączono do pokoju" + parametry[0]);
                break;
            }
            case "/message":
            {
                message(parametry);
            }
            case "/error":
            {
                error(parametry);
            }
        }
    }
    private void room(String[] parametry) {
        widoczek.refresh(parametry);
    }
    private void createRoom(String[] parametry) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        PokojRozmowy pokojRozmowy = new PokojRozmowy(parametry[0],this);
        pokojRozmowy.setTitle("Pokoj " + parametry[0]);
        pokojRozmowy.setVisible(true);
            
        Iterator pokoj = pokoje.iterator();
        while(pokoj.hasNext())
        {
            PokojRozmowy pokojRozmowy1 = (PokojRozmowy) pokoj.next();
            if (pokojRozmowy1 == pokojRozmowy)
            {
                pokojRozmowy1.dispose();
                pokoje.remove(pokojRozmowy1);
                break;
            }
        }
        pokoje.add(pokojRozmowy);
    }
     private void message(String[] parametry) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        String wiadomosc = "";
        for(int i = 1; i < parametry.length; i++) 
        {
            wiadomosc += parametry[i] + " ";
        }
            
        Iterator pokoj = pokoje.iterator();
        while(pokoj.hasNext())
        {
            PokojRozmowy pokoj1 = (PokojRozmowy) pokoj.next();
            if (pokoj1.getNumerPokoju().equals(parametry[0]))
            {
                pokoj1.napiszWiadomosc(wiadomosc);
                break;
            }
        }
        
     }

    private void error(String[] parametry) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public void run() {
        try {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            strumienOdbioru = new ObjectInputStream(gniazdoKlienta.getInputStream());

        } catch (IOException ex) {
            //Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
        }
        while(true)
        {
            try {
                String wiadomosc = (String)strumienOdbioru.readObject();
                obslugaWiadomosc(wiadomosc);
            } catch (IOException ex) {
                //Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
               // Logger.getLogger(KlientPokoje.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }

   

    class WidokMapy extends javax.swing.JScrollPane implements ListSelectionListener{
        private static final long serialVersionUID = 1L;
        private String selectedRoom = "-1";
        private JTable tabela;
        private DefaultTableModel modelTabeli;

        WidokMapy(int szerokosc, int wysokosc,
                        String opis) {
                String[] kolumny = { "Lp.", "Własność:" };
                modelTabeli = new DefaultTableModel(kolumny, 0);
                tabela = new JTable(modelTabeli);
                tabela.setRowSelectionAllowed(false);
                tabela.getSelectionModel().addListSelectionListener(this);
                setViewportView(tabela);
                setPreferredSize(new Dimension(szerokosc, wysokosc));
                setBorder(BorderFactory.createTitledBorder(opis));
        }

        public void refresh(String []parametry){ 
            modelTabeli.setRowCount(0);
            
            if(parametry == null)
            {
                return;
            }
            boolean brakPokoju = true;
            for(String nazwa: parametry)
            {
                String [] wiersz = {nazwa , "Brak"};
                modelTabeli.addRow(wiersz);
                synchronized(selectedRoom)
                {
                    if (nazwa.equals(selectedRoom))
                    {
                        int n = modelTabeli.getRowCount() - 1;
                        tabela.setRowSelectionInterval(n, n);
                        brakPokoju = false;
                    }
                }
            }
            if(brakPokoju)
            {
                selectedRoom = "-1";
            }
        }

        public String getSelection()
        {
            return selectedRoom;
        }
        
        @Override
        public void valueChanged(ListSelectionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            if(e.getValueIsAdjusting())
                return;
                
            DefaultListSelectionModel obj = (DefaultListSelectionModel) e.getSource();
            
            String selectedRoomPom = null;
            int n = obj.getMaxSelectionIndex();
            if (n >= 0)
            {
                selectedRoomPom = (String) tabela.getValueAt(n, 0);  
                synchronized(selectedRoom)
                {
                    selectedRoom = selectedRoomPom;
                }
            }
        }
    }
}